<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="com.choongang.scheduleproject.mapper.AdminMapper">
	<!-- 회원목록 출력 -->
	<select id="getMemberList" resultType="UserVO">
		select  u.user_id,
				u.department_id,
				u.user_role,
				u.user_email,
				u.user_name,
				u.user_pw,
				u.user_cell,
				u.user_birth,
				u.user_active,
				u.user_position,
				u.user_employeenumber,
				u.user_regdate,
				d.department_name,
				u.user_method,
		max(l.log_date) log_date
		from user_user u
		left join user_department d
		on u.department_id = d.department_id
		left join user_log l
		on l.user_id = u.user_id
		<!-- 검색시 실행 -->
		<choose>
			<when test='searchType =="사원번호" and search !=null'>
				where u.user_employeenumber like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="아이디" and search !=null'>
				where u.user_id like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="이름" and search !=null'>
				where u.user_name like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="부서" and search !=null'>
				where d.department_name like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="휴대폰번호" and search !=null'>
				where u.user_cell like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="이메일" and search !=null'>
				where u.user_email like concat('%' , #{search},'%')
			</when>
		</choose>
		group by u.user_id
		order by u.user_employeenumber
		desc limit #{pageStart},#{amount}

	</select>

	<!-- 검색결과 카운트 -->
	<select id="getMemberCount" resultType="int">
		select count(*) from user_user u
		left join user_department d
		on u.department_id = d.department_id
		<choose>
			<when test='searchType =="사원번호" and search !=null'>
				where u.user_employeenumber like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="아이디" and search !=null'>
				where u.user_id like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="이름" and search !=null'>
				where u.user_name like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="부서" and search !=null'>
				where d.department_name like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="휴대폰번호" and search !=null'>
				where u.user_cell like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="이메일" and search !=null'>
				where u.user_email like concat('%' , #{search},'%')
			</when>
		</choose>
	</select>
	<!-- manageMember 페이지에서 체크박스 체크하는 경우 쿼리 -->
	<update id="checkMemberUpdate" parameterType="CheckVO">

		update user_user set
		user_pw = #{password}<!-- 암호화 처리해서 들어가줘야 함 -->
	where user_id = #{userId};
	</update>

	<!-- 유저 활성/비활성 업데이트 -->
	<update id="userActiveUpdate" parameterType="UserActiveVO">
		update user_user set
		<choose>
			<when test="userActive == true">
				user_active = true
			</when>
			<otherwise>
				user_active = false
			</otherwise>
		</choose>
		where user_id = #{userId}
	</update>

	<!-- 체크박스 삭제 작업 -->
	<delete id="deleteMember" parameterType="CheckVO">
		delete from user_user where user_id = #{userId}
	</delete>
	<!-- 해당 프로젝트 인원 삭제 -->
	<delete id="deleteTeamUser" parameterType="CheckVO">
		delete from mapping where user_id=#{userId}
	</delete>


	<!-- 프로젝트 리스트 출력 -->
	<select id="getProjectList" resultType="ProjectVO">
		select  p.pj_num,
				p.pj_name,
				p.pj_active,
				pj_writer,
				p.pj_description,
				p.pj_startdate,
				p.pj_enddate,
				u.user_name,
		count(m.user_id) pj_count
		from user_project p
		left join mapping m
		on m.pj_num = p.pj_num
		left join user_user u
		on u.user_id = p.pj_writer
		<choose>
			<when test='searchType =="pjName" and search !=null'>
				where pj_name like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="pjWriter" and search !=null'>
				where u.user_name like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="pjStartdate" and search !=null'>
				where pj_startdate like concat('%' , #{search},'%')
			</when>
		</choose>
		group by p.pj_num
		order by p.pj_num desc
		limit #{pageStart} , #{amount}
	</select>

	<!-- 프로젝트 갯수 -->
	<select id="getProjectCount" resultType="int">
		select count(*)
		from user_project p
		left join user_user u
		on p.pj_writer = u.user_id
		<choose>
			<when test='searchType =="pjName" and search !=null'>
				where pj_name like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="pjWriter" and search !=null'>
				where u.user_name like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="pjStartdate" and search !=null'>
				where pj_startdate like concat('%' , #{search},'%')
			</when>
		</choose>
	</select>

	<!-- 프로젝트 리스트 활성 /비활성 -->
	<update id="projectActiveUpdate" parameterType="ProjectActiveVO">
		update user_project set
		<choose>
			<when test="pjActive == true">
				pj_active = true
			</when>
			<otherwise>
				pj_active = false
			</otherwise>
		</choose>
		where pj_num = #{pjNum}
	</update>



	<!-- 프로젝트 리스트 체크박스 선택 시 삭제 -->
	<delete id="deleteProjectList" parameterType="ProjectCheckVO">
		delete from user_project where pj_num = #{pjNum}
	</delete>

	<!-- 프로젝트 상세내용 가져오기 -->
	<select id="getProjectDetail" resultType="ProjectDetailVO">
		select  pj_num,
				pj_name,
				pj_description
		from user_project
		where pj_num = #{pjNum}
	</select>

	<select id="getProjectDetailMember"
		resultType="ProjectDetailMemberVO">
		select  m.user_id,
				m.is_observer,
				u.user_name
		from mapping m
		left join user_user u
		on m.user_id = u.user_id
		where pj_num = #{pjNum}
	</select>

	<!-- 프로젝트 통계 가져오기 -->
	<select id="getProjectStatic" resultType="ProjectStaticVO">
		select  pj_num,
				pj_name,
				pj_active,
				(u.user_name) pj_writer,
				pj_startdate,
				(select count(b.board_process) from user_board b where b.pj_num = p.pj_num
				and b.board_process = '완료' ) complete,
				(select count(b.board_process) from user_board b where b.pj_num = p.pj_num
				and b.board_process = '진행' ) uncomplete,
				(round(((select count(b.board_process) from user_board b where b.pj_num = p.pj_num
				and b.board_process = '완료' ) /
				(select count(b.board_process) from user_board b where b.pj_num = p.pj_num )
				)*100)) progress
		from user_project p
		left join user_user u
		on p.pj_writer = u.user_id
		<choose>
			<when test='searchType =="pjName" and search !=null'>
				where pj_name like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="pjWriter" and search !=null'>
				where u.user_name like concat('%' , #{search},'%')
			</when>
			<when test='searchType =="pjStartdate" and search !=null'>
				where pj_startdate like concat('%' , #{search},'%')
			</when>
		</choose>
		order by pj_num desc
		limit #{pageStart} , #{amount}
	</select>

	<!-- 로그인 정보 가져오기 -->
	<select id="getLoginVO" resultType="AdminLoginVO"
		parameterType="AdminLoginVO">
		select admin_id, admin_pw from admin_admin where admin_id = #{adminId}
	</select>
	<!-- 회원 당 통계 정보 가져오기 -->
	<select id="getMemberStatistics" resultType="UserStaticVO" parameterType="int">
		select u.user_name ,
			   (round(((select count(b.board_process) from user_board b where b.board_writer = u.user_id and b.board_process = '완료' and b.pj_num=#{pjNum} ) /
			   (select count(b.board_process) from user_board b where b.board_writer = u.user_id and b.pj_num=#{pjNum}) )*100)) progress
		from user_user u
		left join mapping m
		on u.user_id = m.user_id
		where m.pj_num = #{pjNum} and m.is_observer=false
	</select>
	<!-- 부서 목록 -->
	<select id="getDepList" resultType="DepartmentVO">
		select department_name,
		department_id from user_department
	</select>

	<!-- 부서별 인원 목록 -->
	<select id="getDepMemberList" resultType="UserVO" parameterType="int">
		select user_name,
				user_department.department_id,
				user_id
		from user_user left join
		user_department
		on user_user.department_id =
		user_department.department_id
		where user_user.department_id =
		#{departmentId};
	</select>

	<!--해당 프로젝트 팀원들 가져오기-->
	<select id="getTeamMemberList" resultType="UserVO" parameterType="int">
		select u.user_name,
				u.user_id,
			   u.user_role,
			   m.is_observer
		from user_user u
		left join mapping m
		on u.user_id = m.user_id
		where m.pj_num = #{pjNum}

	</select>
	<!-- 프로젝트 목록에서 프로젝트 팀원 추가 -->
	<insert id="insertMember" parameterType="String">
		insert into mapping (pj_num, user_id, is_observer, pj_bookmark)
		value (#{pjNum},#{userId},0,0)
	</insert>
	<!-- 해당 프로젝트 인원 삭제 -->
	<delete id="deleteTeamMember" parameterType="String">
		delete from mapping where pj_num = #{pjNum} and user_id=#{userId}
	</delete>
	<!-- 해당 프로젝트 인원 옵저버 유무 업데이트 -->
	<update id="updateTeamMember" parameterType="String">
		update mapping set
		<choose>
			<when test="isObserver == 1">
				is_observer = true
			</when>
			<otherwise>
				is_observer = false
			</otherwise>
		</choose>
		where user_id = #{userId} and pj_num=#{pjNum}
	</update>

	<!-- 테스트용 -->
	<insert id="testInsert">
		insert into admin_admin value('admin',#{password})
	</insert>
</mapper>
